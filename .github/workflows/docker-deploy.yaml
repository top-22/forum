name: Build and Deploy Docker Image

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.head_ref }}
  cancel-in-progress: true

env:
  VPS_USER: top22
  DATABASE_USER: deploy
  DATABASE: top22
  DATABASE_HOST: postgres:5432

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.set_type.outputs.type }}
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
      container_name: ${{ steps.set_container_name.outputs.container_name }}
      host: ${{ steps.set_host.outputs.host }}

    steps:
      - name: Set Type ‚öôÔ∏è
        id: set_type
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "type=main_push" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{github.event.action}}" != "closed" ]; then
            echo "type=pr_update" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{github.event.action}}" == "closed" ]; then
            echo "type=pr_close" >> $GITHUB_OUTPUT
          else
            exit 69
          fi

      - name: Set IMAGE_TAG ‚öôÔ∏è
        id: set_image_tag
        run: |
          if [ "${{ steps.set_type.outputs.type }}" == "main_push" ]; then
            echo "IMAGE_TAG=main" >> $GITHUB_OUTPUT
          else
            pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
            echo "IMAGE_TAG=pr-$pull_number" >> $GITHUB_OUTPUT
          fi

      - name: Set CONTAINER_NAME ‚öôÔ∏è
        id: set_container_name
        run: |
          if [ "${{ steps.set_type.outputs.type }}" == "main_push" ]; then
            echo "CONTAINER_NAME=forum" >> $GITHUB_OUTPUT
          else
            echo "CONTAINER_NAME=forum-pr-${{ github.head_ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Set Host ‚öôÔ∏è
        id: set_host
        run: |
          if [ "${{ steps.set_type.outputs.type }}" == "main_push" ]; then
            echo "HOST=forum.jeschek.eu" >> $GITHUB_OUTPUT
          else
            SANITIZED_TAG=$(echo "${{ github.head_ref }}" | sed 's/√§/ae/g; s/√º/ue/g; s/√∂/oe/g')
            echo "HOST=top22-$SANITIZED_TAG.jeschek.eu" >> $GITHUB_OUTPUT
          fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.type == 'pr_update' || needs.prepare.outputs.type == 'main_push'

    steps:
      - name: Checkout repository üõí
        uses: actions/checkout@v3

      - name: Log in to Docker Hub üîê
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx ‚öôÔ∏è
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image üèóÔ∏è
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/forum:${{ needs.prepare.outputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.type == 'pr_update' || needs.prepare.outputs.type == 'main_push'

    needs:
      - prepare
      - build_and_push

    env:
      TYPE: ${{ needs.prepare.outputs.type }}
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}
      HOST: ${{ needs.prepare.outputs.host }}
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      SALT_VALUE: ${{ secrets.SALT_VALUE }}

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set DATABASE_URL ‚öôÔ∏è
        run: |
          if [ $TYPE == "main_push" ]; then
            DATABASE_SCHEMA="main"
          else
            username="${{ github.event.pull_request.user.login }}"
            DATABASE_SCHEMA="$(echo "$username" | tr -dc '[:alpha:]' | tr '[:upper:]' '[:lower:]')"
          fi
          echo "DATABASE_URL=postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST/$DATABASE?schema=$DATABASE_SCHEMA" >> $GITHUB_ENV

      - name: Deploy to VPS üöÄ
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 $VPS_USER@$VPS_HOST "\
            sudo docker stop $CONTAINER_NAME || true && \
            sudo docker rm $CONTAINER_NAME || true && \
            sudo docker rmi $DOCKERHUB_USERNAME/forum:$IMAGE_TAG || true && \
            sudo docker pull $DOCKERHUB_USERNAME/forum:$IMAGE_TAG && \
            sudo docker run -d \
              --name $CONTAINER_NAME \
              --restart always \
              --network=proxy_default \
              -e DATABASE_URL=$DATABASE_URL \
              -e JWT_SECRET=$JWT_SECRET \
              -e SALT_VALUE=$SALT_VALUE \
              -e VIRTUAL_HOST=$HOST \
              -e LETSENCRYPT_HOST=$HOST \
              -e LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL \
              $DOCKERHUB_USERNAME/forum:$IMAGE_TAG && \
            sudo docker network connect db_default $CONTAINER_NAME"

  udpate_db:
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.type == 'main_push'

    needs:
      - prepare
      - deploy

    env:
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
      VPS_HOST: ${{ secrets.VPS_HOST }}

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Update Database üìù
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 $VPS_USER@$VPS_HOST "\
            (sudo docker exec $CONTAINER_NAME yarn testdata delete && \
            sudo docker exec $CONTAINER_NAME npx prisma db push --force-reset && \
            sudo docker exec $CONTAINER_NAME yarn testdata) || true"

  update_pr:
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.type == 'pr_update'

    permissions:
      pull-requests: write

    needs:
      - prepare

    steps:
      - name: Update Pull Request Description üìù
        uses: tzkhan/pr-update-action@v2
        continue-on-error: true
        with:
          head-branch-regex: ${{ github.head_ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          body-template: |
            <a href="https://github.com/${{ github.repository }}/actions/workflows/docker-deploy.yaml">
              <img alt="Docker Deploy workflow status"
               src="https://github.com/${{ github.repository }}/actions/workflows/docker-deploy.yaml/badge.svg?branch=${{ github.head_ref }}"/>
            </a>

            [![](https://img.shields.io/static/v1?label=üåê&message=${{ needs.prepare.outputs.host }}&color=informational)](https://${{ needs.prepare.outputs.host }})
          body-update-action: prefix

  remove_container:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.type == 'pr_close'

    env:
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      VPS_HOST: ${{ secrets.VPS_HOST }}

    steps:
      - name: Setup SSH key üîë
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Remove container from VPS üóëÔ∏è
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 $VPS_USER@$VPS_HOST "\
            sudo docker stop $CONTAINER_NAME || true && \
            sudo docker rm $CONTAINER_NAME || true && \
            sudo docker rmi $DOCKERHUB_USERNAME/forum:$IMAGE_TAG || true"

      - name: Remove image from Docker Hub üóëÔ∏è
        run: |
          TOKEN=$(
                  curl -s -H "Content-Type: application/json" -X POST \
                  -d "{\"username\": \"$DOCKERHUB_USERNAME\", \"password\": \"$DOCKERHUB_TOKEN\"}" \
                  https://hub.docker.com/v2/users/login/ | jq -r .token
                  )
          curl "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/forum/tags/$IMAGE_TAG/" \
                  -X DELETE \
                  -H "Authorization: JWT ${TOKEN}"
